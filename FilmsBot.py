# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
import sqlite3
from datetime import datetime

from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import Application, MessageHandler
from telegram.ext import CommandHandler, ConversationHandler, filters

# –¢–æ–∫–µ–Ω
BOT_TOKEN = '6678338747:AAE8w7D_JPQ3ttCp-hz9awMCzp5rbM8O2MI'
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_keyboard = [['/help', '/site'],
                  ['/duration', '/date'],
                  ['/addfilm'],
                  ['/search all', '/genre all'],
                  ['/close']]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
logger = logging.getLogger(__name__)

keyboard = [[InlineKeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç üíª", url='http://127.0.0.1:5000')]]

film = []
genre = []
duration = []
description = []
date = []
time = []


# –ó–∞–ø—É—Å–∫
async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    now = datetime.now()
    hour = now.hour
    if hour < 6:
        await update.message.reply_html(
            rf"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
            '\n'
            '\n'
            rf"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É—é –í–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–ø—Ä–∞–≤–∫—É: /help",
            reply_markup=markup
        )
    elif hour < 12:
        await update.message.reply_html(
            rf"üëã –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.mention_html()}! –≠—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
            '\n'
            '\n'
            rf"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É—é –í–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–ø—Ä–∞–≤–∫—É: /help",
            reply_markup=markup
        )
    elif hour < 18:
        await update.message.reply_html(
            rf"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.mention_html()}! –≠—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
            '\n'
            '\n'
            rf"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É—é –í–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–ø—Ä–∞–≤–∫—É: /help",
            reply_markup=markup
        )
    else:
        await update.message.reply_html(
            rf"üëã –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {user.mention_html()}! –≠—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
            '\n'
            '\n'
            rf"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É—é –í–∞–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–ø—Ä–∞–≤–∫—É: /help",
            reply_markup=markup
        )


# –ü–æ–º–æ—â—å
async def help_command(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé¨ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n"
                                    "\n"
                                    "üìí –ö–æ–º–∞–Ω–¥—ã:""\n"
                                    "\n"
                                    "1. /help - –≤—ã–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–º–æ—â–∏."
                                    "\n"
                                    "2. /time - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."
                                    "\n"
                                    "3. /date - —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞."
                                    "\n"
                                    "4. /site - —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç."
                                    "\n"
                                    "5. /addfilm - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –∂–∞–Ω—Ä–∞."
                                    "\n"
                                    "6. /work_time - –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã.\n"
                                    "\n"
                                    "üîé –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                    "\n"
                                    "1. /search all - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                                    "\n"
                                    "2. /search '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞' - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Ñ–∏–ª—å–º"
                                    "\n"
                                    "3. /genre all - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                                    "\n"
                                    "4. /genre '–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞' - –≤—ã–≤–æ–¥–∏—Ç —Ñ–∏–ª—å–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Å –∑–∞–¥–∞–Ω–∞–Ω–Ω—ã–º –∂–∞–Ω—Ä–æ–º."
                                    "\n"
                                    "5. /stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞."
                                    "\n", reply_markup=reply_markup)


# –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å–º—É
async def search_film(update, context):
    count_all = 0
    count_exactly = 0
    films = context.args[0]
    con = sqlite3.connect('../db/webproject.sql')
    cur = con.cursor()
    first = cur.execute("SELECT film FROM films")
    records_all = first.fetchall()
    second = cur.execute("SELECT * FROM `films` WHERE `film` LIKE ?", ("%" + films + "%",))
    records = second.fetchall()
    cur.close()
    print(records)
    if films == 'all':
        await update.message.reply_text(f"–í—Å–µ —Ñ–∏–ª—å–º—ã:")
        for i in records_all:
            count_all += 1
            s = i[0]
            await update.message.reply_text(f"{count_all}. {s}")
    else:
        for j in records:
            count_exactly += 1
            a = j[1]
            b = j[2]
            c = j[3]
            d = j[4]
            f = j[5]
            await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
                                            f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
                                            f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                                            f"{d}")


# –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É
async def genre(update, context):
    count_all = 0
    count_exactly = 0
    genres = context.args[0]
    con = sqlite3.connect('../db/webproject.sql')
    cur = con.cursor()
    first = cur.execute("SELECT genre FROM films")
    records_all = first.fetchall()
    second = cur.execute("SELECT * FROM `films` WHERE `genre` LIKE ?", ("%" + genres + "%",))
    records = second.fetchall()
    cur.close()
    if genres == 'all':
        await update.message.reply_text(f"–í—Å–µ –∂–∞–Ω—Ä—ã:")
        for i in records_all:
            count_all += 1
            s = i[0]
            await update.message.reply_text(f"{count_all}. {s}")
    else:
        for j in records:
            count_exactly += 1
            a = j[1]
            b = j[2]
            c = j[3]
            d = j[4]
            f = j[5]
            await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
                                            f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
                                            f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                                            f"{d}")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 1. –ù–∞–∑–≤–∞–Ω–∏–µ
async def addfilms_first_response(update, context):
    global film
    await update.message.reply_text('üìÑ –ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É —Ñ–∏–ª—å–º–∞?')
    return 1


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 2. –ñ–∞–Ω—Ä
async def addfilms_second_response(update, context):
    global genre
    global film
    film = update.message.text
    await update.message.reply_text('‚öîÔ∏è –ö–∞–∫–æ–π –∂–∞–Ω—Ä?')
    return 2


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 3. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async def addfilms_third_response(update, context):
    global duration
    global genre
    genre = update.message.text
    await update.message.reply_text('‚è∞ –î–ª–∏–Ω–∞ —Ñ–∏–ª—å–º–∞?')
    return 3


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ 1. –û–ø–∏—Å–∞–Ω–∏–µ/–æ—Ü–µ–Ω–∫–∞
async def addfilms_fourth_response(update, context):
    global duration
    global description
    duration = update.message.text
    await update.message.reply_text('üìë –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.')
    return 4


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º!
async def addfilms_final(update, context):
    global film, genre, duration, description
    description = update.message.text
    dt = datetime.now().strftime('%Y-%m-%d %H:%M')
    con = sqlite3.connect("../db/webproject.sql")
    cur = con.cursor()
    cur.execute(
        f"INSERT INTO films (film, genre, film_duration, description, adding_date, added_by) VALUES ('{film}', '{genre}',"
        f"'{duration}', '{description}', '{dt}', '8')")
    con.commit()
    await update.message.reply_text('‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω!')
    return ConversationHandler.END


async def timesearch_response(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /time"""
    global time
    await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (12:00)\n'
                                    '–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ "-" (12:00-20:00)')
    return 1


# async def finaltime(update, context):
#     global time
#     count_exactly = 0
#     time = update.message.text
#     if "-" in time:
#         timespisok = time.split('-')
#         con = sqlite3.connect("../db/webproject.sql")
#         cur = con.cursor()
#         cur.execute(
#             f"SELECT * FROM films WHERE adding_date BETWEEN ('{timespisok[0]}') and ('{timespisok[1]}')")
#         record = cur.fetchall()
#         cur.close()
#         if record == '':
#             await update.message.reply_text('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ —Å —Ç–∞–∫–∏–º –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.')
#         else:
#             for j in record:
#                 count_exactly += 1
#                 a = j[1]
#                 b = j[2]
#                 c = j[3]
#                 d = j[4]
#                 f = j[5]
#                 await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
#                                                 f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
#                                                 f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
#                                                 f"{d}")
#     elif "-" not in time:
#         print('Not in time')


async def datesearch_response(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /date"""
    global date
    await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (01-01-2001 12:00)\n'
                                    '–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ "_"'
                                    ' (01-01-2001 12:00_01-02-2001 12:00)')
    return 1


async def finaldate(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /date"""
    global date
    count_exactly = 0
    date = update.message.text
    if "_" in date:
        datespisok = date.split('_')
        con = sqlite3.connect("../db/webproject.sql")
        cur = con.cursor()
        cur.execute(
            f"SELECT * FROM films WHERE adding_date BETWEEN ('{datespisok[0]}') and ('{datespisok[1]}')")
        record = cur.fetchall()
        cur.close()
        print(datespisok[0], datespisok[1])
        if record == '':
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞")
        else:
            for j in record:
                count_exactly += 1
                a = j[1]
                b = j[2]
                c = j[3]
                d = j[4]
                f = j[5]
                await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
                                                f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
                                                f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                                                f"{d}")
        return ConversationHandler.END
    elif "_" not in date:
        con = sqlite3.connect("../db/webproject.sql")
        cur = con.cursor()
        cur.execute(
            f"SELECT * FROM films WHERE adding_date IS ('{date}')")
        record = cur.fetchall()
        cur.close()
        if record == '':
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞")
        else:
            for j in record:
                count_exactly += 1
                a = j[1]
                b = j[2]
                c = j[3]
                d = j[4]
                f = j[5]
                await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
                                                f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
                                                f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                                                f"{d}")


async def durationsearch_response(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /date"""
    global duration
    await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö —Ç–æ—á–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (120), '
                                    '–ª–∏–±–æ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ "-" (60-120)')
    return 1


async def finalduration(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /date"""
    global duration
    count_exactly = 0
    duration = update.message.text
    if "-" in duration:
        durationspisok = duration.split('-')
        con = sqlite3.connect("../db/webproject.sql")
        cur = con.cursor()
        cur.execute(
            f"SELECT * FROM films WHERE film_duration >= ('{durationspisok[0]}') and film_duration <= ('{durationspisok[1]}')")
        record = cur.fetchall()
        cur.close()
        print(durationspisok[0], durationspisok[1])
        if record == '':
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞")
        else:
            for j in record:
                count_exactly += 1
                a = j[1]
                b = j[2]
                c = j[3]
                d = j[4]
                f = j[5]
                await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
                                                f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
                                                f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                                                f"{d}")
        return ConversationHandler.END
    elif "-" not in duration:
        con = sqlite3.connect("../db/webproject.sql")
        cur = con.cursor()
        cur.execute(
            f"SELECT * FROM films WHERE film_duration IS ('{duration}')")
        record = cur.fetchall()
        cur.close()
        if record == '':
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞")
        else:
            for j in record:
                count_exactly += 1
                a = j[1]
                b = j[2]
                c = j[3]
                d = j[4]
                f = j[5]
                await update.message.reply_text(f"{count_exactly}. \n–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {a}; \n–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞: {b};"
                                                f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {c} –º–∏–Ω—É—Ç; \n–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {f}\n"
                                                f"\n üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                                                f"{d}")


# –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def close_keyboard(update, context):
    await update.message.reply_text(
        "–ó–∞–∫—Ä—ã–≤–∞—é!",
        reply_markup=ReplyKeyboardRemove()
    )


# –°–∞–π—Ç
async def site(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /site"""
    await update.message.reply_text(
        "üñ•Ô∏è –ù–∞—à —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç: http://127.0.0.1:5000")


async def stop(update, context):
    await update.message.reply_text("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é!")
    return ConversationHandler.END


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('addfilm', addfilms_first_response)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, addfilms_second_response)],

            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, addfilms_third_response)],

            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, addfilms_fourth_response)],

            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, addfilms_final)]
        },

        fallbacks=[CommandHandler('stop', stop)]
    )

    conv_handlertime = ConversationHandler(
        entry_points=[CommandHandler('date', datesearch_response)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, finaldate)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    conv_handlerduration = ConversationHandler(
        entry_points=[CommandHandler('duration', durationsearch_response)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, finalduration)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler)
    application.add_handler(conv_handlertime)
    application.add_handler(conv_handlerduration)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", search_film))
    application.add_handler(CommandHandler("genre", genre))
    application.add_handler(CommandHandler("time", timesearch_response))
    application.add_handler(CommandHandler("date", datesearch_response))
    application.add_handler(CommandHandler("close", close_keyboard))
    application.add_handler(CommandHandler("site", site))
    application.add_handler(CommandHandler("duration", durationsearch_response))

    application.run_polling()


if __name__ == '__main__':
    main()
